Java-实现双向链表DuLinkList
原文  http://blog.csdn.net/zhangtengyuan23/article/details/22594589

package struct;

import struct.Linklist.Node;

public class DuLinkList<T> {
  
  //定义一个内部类Node，Node的实例代表链表节点
  private class Node{
    private T data;
    private Node prev;
    private Node next;

    public Node(){
      
    }
    //初始化构造器
    public Node(T data, Node prev, Node next){
      this.data = data;
      this.prev = prev;
      this.next = next;
    }
  }
  
  private Node header;			//保存链表的头结点
  private Node tail;				//保存连表的尾节点
  private int size = 0;			//节点数
  
  //创建空链表
  public DuLinkList(){
    //空链表header 和 tail 都是null
    header = null;
    tail = null;
  }
  
  //以指定元素创建链表
  public DuLinkList(T element){
    header = new Node(element, null, null);
    tail = header;				//只有一个节点，header和tail都指向该节点
    size++;
  }
  
  //返回链表的长度
  public int length(){
    return size;
  }
  
  //获取链表索引index处的元素
  public T get(int index){
    return getNodeByIndex(index).data;
  }

  //通过索引index获取指定位置的节点
  public Node getNodeByIndex(int index) {
    if(index < 0 || index > size-1){
      throw new IndexOutOfBoundsException("线性表索引越界");
    }
    if(index <= size/2){
      //从header开始
      Node current = header;
      for(int i = 0; i <= size/2 && current!=null; i++, current = current.next){
        if(index == i){
          return current;
        }
      }
    }
    else{
      //从tail开始
      Node current = tail;
      for(int i = size-1; i > size/2 && current != null; i--, current = current.prev){
        if(index == i){
          return current;
        }
      }
    }
    return null;
  }
  
  //查找链表中指定元素的索引
  public int locate(T element){
    Node current = header;
    for(int i = 0; i < size && current != null ;i++, current = current.next){
      if(current.data.equals(element)){
        return i;
      }
    }
    return -1;
  }
  
  //向链表指定位置插入一个元素
  public void insert(T element, int index){
    if(index < 0 || index > size){
      throw new IndexOutOfBoundsException("线性表索引越界");
    }
    //如果是空链表
    if(size == 0){
      add(element);
    }
    else{
      //档index为0时在链表头处插入
      if(index == 0){
        addAtHeader(element);
      }
      else{
        //获取前置节点
        Node prev = getNodeByIndex(index-1);
        Node next = prev.next;
        Node newNode = new Node(element, prev, next);
        prev.next = newNode;
        next.prev = prev.next;
        size++;
      }
    }
  }

  //尾插法插入一个节点
  private void add(T element) {
    if(header == null){
      header = new Node(element, null, null);
      tail = header;			//只有一个节点，header tail 都指向这个节点
    }
    else{
      Node newNode = new Node(element, tail, null);	//创建新节点，新节点的prev指向tail
      tail.next = newNode;							//tail 的next指向新节点
      tail = newNode;									//以新节点作为尾节点
    }
    size++;
  }

  //采用头插法为链表添加新节点
  private void addAtHeader(T element) {
    header = new Node(element, null, header);
    if(tail == null){
      tail = header;
    }
    size++;
  }
  
  //删除链表中指定索引处的元素
  public T delete(int index){
    if(index < 0 || index > size-1){
      throw new IndexOutOfBoundsException("线性表索引越界");
    }
    Node del = null;
    //如果删除的是header节点
    if(index == 0){
      del = header;
      header = header.next;
      header.prev = null;
    }
    else{
      Node prev = getNodeByIndex(index-1);	//找到前置节点
      del = prev.next;						//获取被删除的节点
      prev.next = del.next;					//让被删除的节点的next指向被删除节点的下一个节点
      if(del.next != null){		
        del.next.prev = prev;			
      }
      del.prev = null;
      del.next = null;
    }
    size--;
    return del.data;
  }
  
  //删除链表的最后一个节点
  public T remove(){
    return delete(size-1);
  }
  
  //链表是否为空
  public boolean empty(){
    return size == 0;
  }
  
  //清空链表
  public void clear(){
    header = null;
    tail = null;
    size = 0;
  }
  
  public String toString(){
    //链表为空表时
    if(empty()){
      return "[]";
    }
    else{
      StringBuilder sb = new StringBuilder("[");
      for(Node current = header; current != null ; current = current.next){
        sb.append(current.data.toString()+",");
      }
      int len = sb.length();
      return sb.delete(len-2, len).append("]").toString();
    }
  }
  
  public String resverseToString(){
    //链表为空表时
    if(empty()){
      return "[]";
    }
    else{
      StringBuilder sb = new StringBuilder("[");
      for(Node current = tail; current != null ; current = current.prev){
        sb.append(current.data.toString()+",");
      }
      int len = sb.length();
      return sb.delete(len-2, len).append("]").toString();
    }
  }
  
  public static void main(String[] args) {
    DuLinkList<String> list = new DuLinkList<String>();
    list.insert("aaaa", 0);
    list.add("bbbb");
    list.add("cccc");
    list.addAtHeader("addAtHead");
    list.insert("1111", 1);
    System.out.println(list);
    list.delete(2);
    System.out.println(list);
    System.out.println(list.locate("cccc"));
    System.out.println(list.get(2));	
  }
}


测试结果：

[addAtHead,1111,aaaa,bbbb,ccc] 
[addAtHead,1111,bbbb,ccc] 
3 
bbbb 

